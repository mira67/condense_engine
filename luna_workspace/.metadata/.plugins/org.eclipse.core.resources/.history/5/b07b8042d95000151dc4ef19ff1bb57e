package helper_classes;

/* Timespan
 * 
 * A span of time, from one timestamp to another. 
 */

public class Timespan extends GeoObject {
	
	public static enum Increment {
		NONE ("day", 0, 0),
		DAY ("day", 0, 1),
		WEEK ("week", 0, 7),
		JAN ("month", 1, 31),
		FEB ("month", 2, 29),
		MAR ("month", 3, 31),
		APR ("month", 4, 30),
		MAY ("month", 5, 31),
		JUN ("month", 6, 30),
		JUL ("month", 7, 31),
		AUG ("month", 8, 31),
		SEP ("month", 9, 30),
		OCT ("month", 10, 31),
		NOV ("month", 11, 30),
		DEC ("month", 12, 31),
		YEAR ("year", 1, 366),
		DJF ("multiyear-seasonal-DJF", 12, 91),	// Dec-Jan-Feb
		MAM ("multiyear-seasonal-MAM", 3, 92),	// Mar-Apr-May
		JJA ("multiyear-seasonal-JJA", 6, 92),	// Jun-Jul-Aug
		SON ("multiyear-seasonal-SON", 9, 92);	// Sep-Oct-Nov
    	
		private final String name;
    	private final int startMonth;
    	private final int days;
    	private Increment(String s, int month, int maxDays) {
    		name = s;
    		startMonth = month;
    		days = maxDays;}
    	public String toString() {return name;}
    	public int startMonth() {return startMonth;}
    	public int maxDays() {return days;}
	}

	protected Timestamp startDate;	// Beginning of the timespan
	protected Timestamp endDate;	// End of the timespan.
	
	// Default time increment
    protected Increment increment = Increment.NONE;
    
	/*---------------------------------------------------------------------------
	// Constructors
	//-------------------------------------------------------------------------*/

	public Timespan() {
		startDate = new Timestamp( 0.0 );
		endDate = new Timestamp( 0.0 );
	}


	/* Timespan
	 * 
	 * Constructor using two timestamps
	 */
	public Timespan(Timestamp begin, Timestamp end) {
		startDate = begin;
		endDate = end;
	}


	/* Timespan
	 * 
	 * Constructor using a starting timestamp and number of days. 
	 */
	public Timespan(Timestamp begin, int days) {
		startDate = begin;
		endDate = begin;
		endDate.incrementDays( days );
	}

	
	/* Timespan
	 * 
	 * Constructor using a starting and ending timestamps, and an increment.
	 * If the start and end are the same, the time span will be a single increment. 
	 */
	public Timespan(Timestamp start, Timestamp end, Increment i) {
		
		startDate = start;
		endDate = end;
		
		setSpan(i);
	}
	
	/* setSpan
	 * 
	 * Reset the start and end dates to the selected increment.
	 * Requires that the start and end timestamps be set already.
	 * 
	 * The new span is based on the start date. Ending dates that
	 * span multiple years will be truncated unless the increment
	 * is "NONE".
	 * 
	 * If a year increment is selected, the start and end dates will encompass
	 * the entire year of the start date.
	 * 
	 * If a month increment is selected, the start and end dates will encompass
	 * the entire start month, no fractional months.
	 */
	public void setSpan(Increment i) {
	
		increment = i;
		
		int startYear = startDate.year();
		int startMonth = startDate.month();
		int startDay = startDate.dayOfMonth();

		// Defaults
		int endYear = endDate.year();
		int endMonth = endDate.month();
		int endDay = endDate.dayOfMonth();
	
		switch(increment) {
			case DAY:
				endYear = startYear;
				endMonth = startMonth;
				endDay = startDay;
				break;
				
			case WEEK:
				endYear = startYear;
				endMonth = startMonth;
				// Add 6 to encompass a whole week.
				// Warning! Doesn't start or end on any particular day of the week.
				endDay = startDay + 6;

				break;
				
			case JAN:
			case FEB:
			case MAR:
			case APR:
			case MAY:
			case JUN:
			case JUL:
			case AUG:
			case SEP:
			case OCT:
			case NOV:
			case DEC:
				startMonth = increment.startMonth;
                startDay = 1;
                endYear = startYear;
				endMonth = startMonth;				
				endDay = Timestamp.daysInMonth(startMonth, startYear);;
				break;

			case YEAR:
				
				// Use a full years, Jan 1 to Dec 31, starting in the start year.	
				startMonth = 1;
				startDay = 1;

				endYear = startYear;
				endMonth = 12;
				endDay = 31;
				
				break;

			case SEASONAL:
				startDay = 1;
				endYear = startYear;

				// December-January-February (90 or 91 days, depending on leap years)
				if (startMonth == 12 || startMonth == 1 || startMonth == 2) {

					// An exception if starting in Jan or Feb. User is stupid. Set the start year back to Dec.
					if (startMonth != 12) startYear = startYear - 1;
					
					startMonth = 12;
					endMonth = 2;

					// Special case for single-season increment time spans
					if (i == Increment.SEASONAL) endYear = startYear + 1;

					endDay = Timestamp.daysInMonth(2, endYear);
				}
				
				// March-April-May (92 days)
				if (startMonth == 3 || startMonth == 4 || startMonth == 5) {
					startMonth = 3;
					endMonth = 5;
					endDay = 31;
				}

				// June-July-August (92 days)
				if (startMonth == 6 || startMonth == 7 || startMonth == 8) {
					startMonth = 6;
					endMonth = 8;
					endDay = 31;
				}

				// September-October-November (91 days)
				if (startMonth == 9 || startMonth == 10 || startMonth == 11) {	// SON
					startMonth = 9;
					endMonth = 11;
					endDay = 30;
				}	
				
				break;
				

			case DJF:	// December-January-February
				startMonth = increment.startMonth();
				startDay = 1;
				endYear = startYear + 1;
				endMonth = 2;
				endDay = Timestamp.daysInMonth(2, endYear);
				break;
				
			case MAM:  // March-April-May
				startMonth = increment.startMonth();
				startDay = 1;
				endMonth = startMonth + 2;
				endDay = 31;
				break;
				
			case JJA:  // June-July-August
				startMonth = increment.startMonth();
				startDay = 1;
				endMonth = startMonth + 2;
				endDay = 31;
				break;
				
			case SON:  // September-October-November
				startMonth = increment.startMonth();
				startDay = 1;
				endMonth = startMonth + 2;
				endDay = 30;
				break;
				
			case NONE:
			default:
				break;
		}
		
		startDate = new Timestamp( startYear, startMonth, startDay );
		endDate = new Timestamp( endYear, endMonth, endDay );
	}

	
	// Various sets and gets.
	
	public void startTimestamp(Timestamp t) { startDate = t; }
	public Timestamp startTimestamp() { return startDate; }
	
	public void endTimestamp(Timestamp t) { endDate = t; }
	public Timestamp endTimestamp() { return endDate; }	

	public Timespan.Increment increment() { return increment; }
	
	/*
	 * timespanDays
	 * 
	 * Return the integer number of whole days in the time span.
	 */
	public int timespanDays() {

		int days = 0;
		
		switch (increment) {
			case DAY:
				days = 1;
				break;
				
			case WEEK:
				days = 7;
				break;
				
			case MONTH:
				days = 31;

				if (startDate.month() == 4 ||
					startDate.month() == 6 ||
					startDate.month() == 9 ||
					startDate.month() == 11) days = 30;

				if (startDate.month() == 2) days = Timestamp.daysInMonth(2, startDate.year());
				break;

			case YEAR:
				days = 365;
				if (Timestamp.daysInMonth(2, startDate.year()) == 29) days = 366;
				break;

			case SEASONAL:
				days = 92;
				break;

			// Months with 31 days
			case MULTIYEARJAN:
			case MULTIYEARMAR:
			case MULTIYEARMAY:
			case MULTIYEARJUL:
			case MULTIYEARAUG:
			case MULTIYEAROCT:
			case MULTIYEARDEC:
				days = ((endDate.year() - startDate.year()) + 1) * 31;
				break;
				
			// Months with 30 days
			case MULTIYEARAPR:
			case MULTIYEARJUN:
			case MULTIYEARSEP:
			case MULTIYEARNOV:
				days = ((endDate.year() - startDate.year()) + 1) * 30;
				break;

			// And then there's February...
			case MULTIYEARFEB:
				for (int y = startDate.year(); y <= endDate.year(); y++) {
					days += Timestamp.daysInMonth(2, y); 
				}
				break;
				
			case MULTIYEARDJF:
				days = (endDate.year() - startDate.year()) * 62;
				
				// Iterate over each February, counting the total days. The first February
				// is the next year after the start year, so the loop starts +1.
				for (int y = startDate.year() + 1; y <= endDate.year(); y++) {
					days = days + Timestamp.daysInMonth(2, y);
				}

				break;

			case MULTIYEARMAM:
				days = ((endDate.year() - startDate.year()) + 1) * 92;
				break;
			
			case MULTIYEARJJA:
				days = ((endDate.year() - startDate.year()) + 1) * 92;
				break;
			
			case MULTIYEARSON:
				days = ((endDate.year() - startDate.year()) + 1) * 91;
				break;

			default:
				break;
		}
		
		return days;
	}

	/*
	 * incrementDays
	 * 
	 * Return the number of whole days in a time increment. Ignores
	 * multi-year functionality: Assumes only a single year (so multi-year
	 * increments will only return the increment days in the specified year).
	 * If you want a total of *all days* in a multi-year increment, use the
	 * TimespanDays method.
	 * 
	 * For seasonal increments, use the *beginning year* as the input argument.
	 */
	public static int incrementDays( Increment inc, int startYear, int startMonth ) {

		int days = 0;
		
		switch (inc) {
			case DAY:
				days = 1;
				break;
				
			case WEEK:
				days = 7;
				break;
				
			case MONTH:
				days = 31;

				if (startMonth == 4 ||
					startMonth == 6 ||
					startMonth == 9 ||
					startMonth == 11) days = 30;

				if (startMonth == 2) days = Timestamp.daysInMonth(2, startYear);
				break;

			case YEAR:
				days = 365;
				if (Timestamp.daysInMonth(2, startYear) == 29) days = 366;
				break;

			case SEASONAL:
				days = 92;
				if (Timestamp.daysInMonth(startMonth, startYear) == 29) days = 91;
				break;

			// Months with 31 days
			case MULTIYEARJAN:
			case MULTIYEARMAR:
			case MULTIYEARMAY:
			case MULTIYEARJUL:
			case MULTIYEARAUG:
			case MULTIYEAROCT:
			case MULTIYEARDEC:
				days = 31;
				break;
				
			// Months with 30 days
			case MULTIYEARAPR:
			case MULTIYEARJUN:
			case MULTIYEARSEP:
			case MULTIYEARNOV:
				days = 30;
				break;

			// And then there's February...
			case MULTIYEARFEB:
				days = Timestamp.daysInMonth(2, startYear); 
				break;
				
			case MULTIYEARDJF:
				days = 92;
				if (Timestamp.daysInMonth(startMonth, startYear) == 29) days = 91;
				break;

			case MULTIYEARMAM:
			case MULTIYEARJJA:
			case MULTIYEARSON:
				days = 92;
				break;

			default:
				break;
		}
		
		return days;
	}

	/*
	 * nextDay
	 * 
	 * Given any day, return a timestamp of the next day in this timespan. Returns
	 * null if there are no more days in this timespan. This is useful for skipping
	 * over days that aren't in the time increment.
	 */
	public Timestamp nextDay( Timestamp d ) {

		Timestamp date = new Timestamp(d);
		
		date.incrementOneDay();
		
		// If we're incrementing multiple years over one particular month, and if we've
		// gone past that month, reset the date to the next year at the beginning
		// of the month, next year.
		if (increment.month() > 0 && increment.month() != date.month()) {
				date = new Timestamp(date.year()+1, increment.month(), 1);
		}
		
		// December 31st is a special case, don't increment the year twice.
		if (increment.month() == 12 && d.month() == 12 && d.dayOfMonth() == 31) {
				date = new Timestamp(d.year()+1, 12, 1);
		}
		
		// If we're incrementing multiple years over one season, and if we've
		// gone past that season, reset the date to the beginning of the next
		// year's season.
		if (increment == Timespan.Increment.MULTIYEARMAM && date.month() > 5) {
			date = new Timestamp(date.year()+1, 3, 1);
		}
		if (increment == Timespan.Increment.MULTIYEARJJA && date.month() > 8) {
			date = new Timestamp(date.year()+1, 6, 1);
		}
		if (increment == Timespan.Increment.MULTIYEARSON && date.month() > 11) {
			date = new Timestamp(date.year()+1, 9, 1);
		}
		if (increment == Timespan.Increment.MULTIYEARDJF && date.month() > 2 &&
				date.month() < 12) {
			date = new Timestamp(date.year(), 12, 1);
		}

		if (date.days() > endDate.days()) return null;
		
		return date;
	}
	
	// Print methods.

	public void print() {
		startDate.print();
		System.out.print("");
		endDate.print();
		Tools.message("Increment: " + increment.name());
	}

}
