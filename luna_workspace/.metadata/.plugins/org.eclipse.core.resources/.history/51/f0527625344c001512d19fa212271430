package helper_classes;

/* Timespan
 * 
 * A span of time, from one timestamp to another. 
 */

public class Timespan extends GeoObject {
	
	public static enum Increment {
			DAY ("day"),
			WEEK ("week"),
			MONTH ("month"),
			YEAR ("year"),
			SEASONAL ("seasonal"),
			MULTIYEARJAN ("multiyear-january"),
			MULTIYEARFEB ("multiyear-february"),
			MULTIYEARMAR ("multiyear-march"),
			MULTIYEARAPR ("multiyear-april"),
			MULTIYEARMAY ("multiyear-may"),
			MULTIYEARJUN ("multiyear-june"),
			MULTIYEARJUL ("multiyear-july"),
			MULTIYEARAUG ("multiyear-august"),
			MULTIYEARSEP ("multiyear-september"),
			MULTIYEAROCT ("multiyear-october"),
			MULTIYEARNOV ("multiyear-november"),
			MULTIYEARDEC ("multiyear-december"),
			MULTIYEARDJF ("multiyear-seasonal-DJF"),
			MULTIYEARMAM ("multiyear-seasonal-MAM"),
			MULTIYEARJJA ("multiyear-seasonal-JJA"),
			MULTIYEARSON ("multiyear-seasonal-SON");
    	private final String name;       
    	private Increment(String s) {name = s;}
    	public String toString() {return name;}
	}

	protected Timestamp startTime;	// Beginning of the timespan
	protected Timestamp endTime;	// End of the timespan.
	
	// Default time increment
    protected Increment increment = Increment.DAY;
    
	/*---------------------------------------------------------------------------
	// Constructors
	//-------------------------------------------------------------------------*/

	public Timespan() {
		startTime = new Timestamp( 0.0 );
		endTime = new Timestamp( 0.0 );
	}


	/* Timespan
	 * 
	 * Constructor using two timestamps
	 */
	public Timespan(Timestamp begin, Timestamp end) {
		startTime = begin;
		endTime = end;
	}


	/* Timespan
	 * 
	 * Constructor using a starting timestamp and number of days. 
	 */
	public Timespan(Timestamp begin, int days) {
		startTime = begin;
		endTime = begin;
		endTime.incrementDays( days );
	}

	
	/* Timespan
	 * 
	 * Constructor using a starting and ending timestamps, and an increment.
	 * If the start and end are the same, the time span will be a single increment. 
	 */
	public Timespan(Timestamp start, Timestamp end, Increment i) {
		
		startTime = start;
		endTime = end;
		
		setIncrement(i);
	}
	
	/* setIncrement
	 * 
	 * For a given timespan, reset the start and end dates to the selected increment.
	 * Requires that the start and end timestamps be set already. This is mostly
	 * based on the start date.
	 * 
	 * If a year increment is selected, the start and end dates will encompass
	 * the entire year of the start date.
	 * 
	 * If a month increment is selected, the start and end dates will encompass
	 * the entire start month, no fractional months.
	 * 
	 * If a multiyear-seasonal or multiyear-monthly increment is selected, the
	 * start/end months and days are replaced with the entire span.
	 */
	public void setIncrement(Increment i) {
	
		increment = i;
		
		int startYear = startTime.year();
		int startMonth = startTime.month();
		int startDay = startTime.dayOfMonth();

		// Defaults
		int endYear = endTime.year();
		int endMonth = endTime.month();
		int endDay = endTime.dayOfMonth();
	
		switch(increment) {
			case DAY:
				endYear = startYear;
				endMonth = startMonth;
				endDay = startDay;
				break;
				
			case WEEK:
				endYear = startYear;
				endMonth = startMonth;
				// Add 6 to encompass a whole week.
				// Warning! Doesn't start or end on any particular day of the week.
				endDay = startDay + 6;

				break;
				
			case MONTH:
                startDay = 1;

				if (i == Increment.MONTH) endYear = startYear;
				endMonth = startMonth;				
				endDay = Timestamp.daysInMonth(endMonth, endYear);

				break;

			case YEAR:
				
				// Use a full years, Jan 1 to Dec 31, starting in the start year.	
				startYear = startTime.year();
				startMonth = 1;
				startDay = 1;

				if (i == Increment.YEAR) endYear = startYear;
				endMonth = 12;
				endDay = 31;
				
				break;

			case MULTIYEARJAN:
	            startDay = 1;
                startMonth = 1;
                endDay = 31;
				endMonth = 1;
				break;
			case MULTIYEARFEB:
                startDay = 1;
                startMonth = 2;
                endDay = Timestamp.daysInMonth(endMonth, endYear);
				endMonth = 2;
				break;
			case MULTIYEARMAR:
                startDay = 1;
                startMonth = 3;
                endDay = 31;
				endMonth = 3;
				break;
			case MULTIYEARAPR:
                startDay = 1;
                startMonth = 4;
                endDay = 30;
				endMonth = 4;
				break;
			case MULTIYEARMAY:
                startDay = 1;
                startMonth = 5;
                endDay = 31;
				endMonth = 5;
				break;
			case MULTIYEARJUN:
                startDay = 1;
                startMonth = 6;
                endDay = 30;
				endMonth = 6;
				break;
			case MULTIYEARJUL:
                startDay = 1;
                startMonth = 7;
                endDay = 31;
				endMonth = 7;
				break;
			case MULTIYEARAUG:
                startDay = 1;
                startMonth = 8;
                endDay = 31;
				endMonth = 8;
				break;
			case MULTIYEARSEP:
                startDay = 1;
                startMonth = 9;
                endDay = 30;
				endMonth = 9;
				break;
			case MULTIYEAROCT:
                startDay = 1;
                startMonth = 10;
                endDay = 31;
				endMonth = 10;
				break;
			case MULTIYEARNOV:
                startDay = 1;
                startMonth = 11;
                endDay = 30;
				endMonth = 11;
				break;
			case MULTIYEARDEC:
                startDay = 1;
                startMonth = 12;
                endDay = 31;
				endMonth = 12;
				break;
			case SEASONAL:
				startDay = 1;
				endYear = startYear;

				// December-January-February (90 or 91 days, depending on leap years)
				if (startMonth == 12 || startMonth == 1 || startMonth == 2) {

					// An exception if starting in Jan or Feb. User is stupid. Set the start year back to Dec.
					if (startMonth != 12) startYear = startYear - 1;
					
					startMonth = 12;
					endMonth = 2;

					// Special case for single-season increment time spans
					if (i == Increment.SEASONAL) endYear = startYear + 1;

					endDay = Timestamp.daysInMonth(2, endYear);
				}
				
				// March-April-May (92 days)
				if (startMonth == 3 || startMonth == 4 || startMonth == 5) {
					startMonth = 3;
					endMonth = 5;
					endDay = 31;
				}

				// June-July-August (92 days)
				if (startMonth == 6 || startMonth == 7 || startMonth == 8) {
					startMonth = 6;
					endMonth = 8;
					endDay = 31;
				}

				// September-October-November (91 days)
				if (startMonth == 9 || startMonth == 10 || startMonth == 11) {	// SON
					startMonth = 9;
					endMonth = 11;
					endDay = 30;
				}	
				
				break;
				

			case MULTIYEARDJF:	// December-January-February
				startMonth = 12;
				startDay = 1;
				endMonth = 2;
				endDay = Timestamp.daysInMonth(2, endYear);
				break;
				
			case MULTIYEARMAM:  // March-April-May
				startMonth = 3;
				startDay = 1;
				endMonth = 5;
				endDay = 31;
				break;
				
			case MULTIYEARJJA:  // June-July-August
				startMonth = 6;
				startDay = 1;
				endMonth = 8;
				endDay = 31;
				break;
				
			case MULTIYEARSON:  // September-October-November
				startMonth = 9;
				startDay = 1;
				endMonth = 11;
				endDay = 30;
				break;
				
			default:
				break;
		}
		
		startTime = new Timestamp( startYear, startMonth, startDay );
		endTime = new Timestamp( endYear, endMonth, endDay );
	}

	
	// Various sets and gets.
	
	public void startTimestamp(Timestamp t) { startTime = t; }
	public Timestamp startTimestamp() { return startTime; }
	
	public void endTimestamp(Timestamp t) { endTime = t; }
	public Timestamp endTimestamp() { return endTime; }	

	/*
	 * fullDays
	 * 
	 * Return the integer number of whole days in the time span.
	 */
	public int fullDays() {

		int days = 0;
		
		switch (increment) {
			case DAY:
			case WEEK:
			case MONTH:
			case YEAR:
			case SEASONAL:
				break;

			// Months with 31 days
			case MULTIYEARJAN:
			case MULTIYEARMAR:
			case MULTIYEARMAY:
			case MULTIYEARJUL:
			case MULTIYEARAUG:
			case MULTIYEAROCT:
			case MULTIYEARDEC:
				days = ((endTime.year() - startTime.year()) + 1) * 31;
				break;
				
			// Months with 30 days
			case MULTIYEARAPR:
			case MULTIYEARJUN:
			case MULTIYEARSEP:
			case MULTIYEARNOV:
				days = ((endTime.year() - startTime.year()) + 1) * 30;
				break;

			// And then there's February...
			case MULTIYEARFEB:
				for (int y = startTime.year(); y <= endTime.year(); y++) {
					days += Timestamp.daysInMonth(2, y); 
				}
				break;
				
			case MULTIYEARDJF:
				days = ((endTime.year() - startTime.year()) + 1) * 62;
				
				// Iterate over the Februarys, counting the days. The first February
				// is the next year after the start year, so the loop starts +1.
				for (int y = startTime.year() + 1; y <= endTime.year(); y++) {
					days = days + Timestamp.daysInMonth(2, y);
				}

				break;

			case MULTIYEARMAM:
				days = ((endTime.year() - startTime.year()) + 1) * 92;
				break;
			
			case MULTIYEARJJA:
				days = ((endTime.year() - startTime.year()) + 1) * 92;
				break;
			
			case MULTIYEARSON:
				days = ((endTime.year() - startTime.year()) + 1) * 91;
				break;

			default:
				break;
		}
		
		return days;
	}

	
	// Print methods.

	public void print() {
		startTime.print();
		System.out.print("");
		endTime.print();
		Tools.message("Increment: " + increment.name());
	}

}
