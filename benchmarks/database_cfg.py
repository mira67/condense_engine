"""
Database configuration class for penguin benchmark
1. Database type (H2, ...)
2. Need a database meta table for indexing different db (method,dataset vs db)
"""
import sys
import os

#Main Class
class configDB(object):

    def __init__(self):
        pass
        
    def enum(self,**named_values):
        return type('Enum', (), named_values)

    def whichDB(self):
        """
        1. database option
        2. Create a naming policy for databases generated by different configurations
           Type+Method
        """
        dbRes = []
        #ask user to select, and return name and driver name
        usrinput = raw_input('Which database: H2/Perst/Aerospike --> ')
        dbRes.append(usrinput)
        usrinput = raw_input('Which mode: mem/ssd/psd --> ')
        dbRes.append(usrinput)
        usrinput = raw_input('Which dataset: seaice/ssmi --> ')
        dbRes.append(usrinput)
        #channel option can be added, for now, fixed
        usrinput = raw_input('Which method: sparse/no --> ')
        dbRes.append(usrinput)

        #more options like cluster/single can be added
        return dbRes

#cfgdb = configDB()
#db = cfgdb.whichDB()
#print db

